import os
import datetime
from peewee import SqliteDatabase, Model, CharField, BooleanField, DateField,IntegerField
from aiogram import Bot, types
from aiogram.dispatcher import Dispatcher
from aiogram.types import ParseMode
from aiogram.utils import executor
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
import pandas as pd
import io
import xlsxwriter
import sqlite3
from aiogram.dispatcher.filters import Text
import config
import logging
from aiogram.types.message import ContentType
import aiocron
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.types import Message
from enum import Enum
from aiogram.dispatcher import FSMContext
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher.filters import Command
from aiogram.dispatcher.middlewares import LifetimeControllerMiddleware
import aiosqlite




# –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ –∏ chat_id —Å—É–ø–µ—Ä–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
BOT_TOKEN = '2099288144:AAGXadtWRI9BNf5nt87TA4eLFoVtVz50DyE'
SUPERUSER_CHAT_ID = -1001806118480

# log
logging.basicConfig(level=logging.INFO)


bot = Bot(token=BOT_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
db_path = os.path.join(os.path.dirname(__file__), 'users.db')
db = SqliteDatabase(db_path)


# –û–ø—Ä–µ–¥–µ–ª—è–µ–º –º–æ–¥–µ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
class User(Model):
    telegram_chat_id = CharField(unique=True)
    organization_name = CharField(null=True)
    contact_info = CharField(null=True)
    approved = BooleanField(default=False)
    is_subscribed = BooleanField(default=False)
    subscription_end_date = DateField(null=True)
    subscription_count = IntegerField(default=0)

    class Meta:
        database = db


# –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö, –µ—Å–ª–∏ –µ–µ –Ω–µ—Ç
with db:
    db.create_tables([User])


# –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ –∏ chat_id —Å—É–ø–µ—Ä–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
BOT_TOKEN = '2099288144:AAGXadtWRI9BNf5nt87TA4eLFoVtVz50DyE'
SUPERUSER_CHAT_ID = -1001806118480

# log
logging.basicConfig(level=logging.INFO)


bot = Bot(token=BOT_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
db_path = os.path.join(os.path.dirname(__file__), 'users.db')
db = SqliteDatabase(db_path)


# –û–ø—Ä–µ–¥–µ–ª—è–µ–º –º–æ–¥–µ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
class User(Model):
    telegram_chat_id = CharField(unique=True)
    organization_name = CharField(null=True)
    contact_info = CharField(null=True)
    approved = BooleanField(default=False)
    is_subscribed = BooleanField(default=False)
    subscription_end_date = DateField(null=True)
    subscription_count = IntegerField(default=0)

    class Meta:
        database = db


# –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö, –µ—Å–ª–∏ –µ–µ –Ω–µ—Ç
with db:
    db.create_tables([User])


class RegistrationState(StatesGroup):
    waiting_for_organization_name = State()
    waiting_for_contact_info = State()


@dp.message_handler(commands=['start'])
async def cmd_start(message: types.Message, state: FSMContext):
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    user = User.get_or_create(telegram_chat_id=str(message.chat.id))[0]

    if user.approved:
        await message.answer("–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.")
    elif user.contact_info:
        await message.answer("–í–∞—à –∑–∞–ø—Ä–æ—Å –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é —É–∂–µ –±—ã–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∏ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏.")
    else:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏ –∫–æ–º–∞–Ω–¥–µ /start
        await message.answer("–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –ß—Ç–æ–±—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏.")

        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏
        await RegistrationState.waiting_for_organization_name.set()


@dp.message_handler(state=RegistrationState.waiting_for_organization_name)
async def process_organization_name(message: types.Message, state: FSMContext):
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    user = User.get_or_none(telegram_chat_id=str(message.chat.id))
    if message.chat.id == SUPERUSER_CHAT_ID:
        await message.answer("–°—É–ø–µ—Ä–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω.")
        return

    if user is None:
        # –ï—Å–ª–∏ –∑–∞–ø–∏—Å—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç,
        # —Å–æ–∑–¥–∞–µ–º –µ–µ
        user = User.create(telegram_chat_id=str(message.chat.id))

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏
    user.organization_name = message.text
    user.save()

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç–æ–º, —á—Ç–æ –∑–∞–ø—Ä–æ—Å –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω
    await message.reply('–í–≤–µ–¥–∏—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é.')

    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
    await RegistrationState.waiting_for_contact_info.set()


@dp.message_handler(state=RegistrationState.waiting_for_contact_info)
async def process_contact_info(message: types.Message, state: FSMContext):
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    user = User.get_or_none(telegram_chat_id=str(message.chat.id))
    if user is None:
        # –ï—Å–ª–∏ –∑–∞–ø–∏—Å—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç,
        # —Å–æ–∑–¥–∞–µ–º –µ–µ
        user = User.create(telegram_chat_id=str(message.chat.id))

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ç–∞–∫—Ç–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
    user.contact_info = message.text
    user.save()

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç–æ–º, —á—Ç–æ –∑–∞–ø—Ä–æ—Å –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω
    await message.reply('–ó–∞–ø—Ä–æ—Å –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–µ –û–∑–µ—Ä—Ü–æ-–ª–æ–≥–∏—Å—Ç–∏–∫')

    keyboard = InlineKeyboardMarkup(row_width=2)
    approve_button = InlineKeyboardButton('–ü—Ä–∏–Ω—è—Ç—å', callback_data=f'approve_{user.telegram_chat_id}')
    reject_button = InlineKeyboardButton('–û—Ç–∫–ª–æ–Ω–∏—Ç—å', callback_data=f'reject_{user.telegram_chat_id}')
    invalid_button = InlineKeyboardButton('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç', callback_data=f'invalid_{user.telegram_chat_id}')
    keyboard.add(approve_button, reject_button, invalid_button)

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    message_for_admin = f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.organization_name} ({user.contact_info}) –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é."
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
    await bot.send_message(chat_id=SUPERUSER_CHAT_ID, text=message_for_admin, reply_markup=keyboard)

    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.finish()


# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø—É–Ω–∫—Ç–∞ –º–µ–Ω—é
menu_keyboard = types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
menu_keyboard.add(
    types.KeyboardButton("1 - –ö—Ä–∞—Ç–∫–∏–π –Ω–æ–º–µ—Ä —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"),
    types.KeyboardButton("2 - –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω–æ–µ —Å—Ä–µ–¥—Å—Ç–≤–æ, –ø—Ä–∏—Ü–µ–ø"),
    types.KeyboardButton("3 - –ü–æ–ª—É—á–∞—Ç–µ–ª—å"),
    types.KeyboardButton("4 - –ù–æ–º–µ—Ä —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"),
    types.KeyboardButton("5 - –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π –Ω–æ–º–µ—Ä —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"),
    types.KeyboardButton("6 - –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–µ–Ω–∏–µ"),
    types.KeyboardButton("7 - –ù–æ–º–µ—Ä –ø—Ä–µ–¥—à–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Å–≤–∏–¥–µ—Ç–µ–ª—å—Å—Ç–≤–∞"),
    types.KeyboardButton("8 - –ö–Ω–∏–∂–∫–∞ –ú–î–ü"),
    types.KeyboardButton("9 - INV"),
    types.KeyboardButton("10 - CMR"),
    types.KeyboardButton("11 - –í—ã—Ö–æ–¥")
)


menu_to_field = {
    "1 - –ö—Ä–∞—Ç–∫–∏–π –Ω–æ–º–µ—Ä —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è": "brief_number",
    "2 - –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω–æ–µ —Å—Ä–µ–¥—Å—Ç–≤–æ, –ø—Ä–∏—Ü–µ–ø": "transport",
    "3 - –ü–æ–ª—É—á–∞—Ç–µ–ª—å": "recipient",
    "4 - –ù–æ–º–µ—Ä —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è": "notice_number",
    "5 - –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π –Ω–æ–º–µ—Ä —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è": "registration_number",
    "6 - –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–µ–Ω–∏–µ": "permission",
    "7 - –ù–æ–º–µ—Ä –ø—Ä–µ–¥—à–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Å–≤–∏–¥–µ—Ç–µ–ª—å—Å—Ç–≤–∞": "previous_certificate",
    "8 - –ö–Ω–∏–∂–∫–∞ –ú–î–ü": "mdp_book",
    "9 - INV": "inv",
    "10 - CMR": "cmr"
}


class SearchStates(StatesGroup):
    CHOOSING_FIELD = State()
    ENTERING_VALUE = State()


# –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ö–µ–Ω–¥–ª–µ—Ä –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /search, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –∑–∞–ø—É—Å–∫–∞—Ç—å FSM
@dp.message_handler(commands=['search'], state='*')
async def search_handler(message: Message):
    # –ø—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–¥–ø–∏—Å–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    user = User.get_or_none(telegram_chat_id=str(message.from_user.id), approved=True, is_subscribed=True)

    if user:
        # –ó–∞–ø—É—Å–∫–∞–µ–º FSM, –ø–µ—Ä–µ–≤–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ CHOOSING_FIELD
        await SearchStates.CHOOSING_FIELD.set()
        await message.answer("–í–∞—Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –û–∑–µ—Ä—Ü–æ-–õ–æ–≥–∏—Å—Ç–∏–∫üî•\n\n"
                             "‚ùóÔ∏è–í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –º–µ–Ω—é –ø–æ –∫–æ—Ç–æ—Ä–æ–º—É –Ω–∞–¥–æ –Ω–∞–π—Ç–∏ –¥–∞–Ω–Ω—ã–µ  –≤ –ó–¢–ö ‚ùóÔ∏è", reply_markup=menu_keyboard)
    else:
        await bot.send_message(message.chat.id, "–í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–º –Ω–∞—à–µ–≥–æ –±–æ—Ç–∞ –∏–ª–∏ –Ω–µ –ø—Ä–æ—à–ª–∏ –º–æ–¥–µ—Ä–∞—Ü–∏—é. "
                                                "–î–ª—è –ø–æ–¥–ø–∏—Å–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /buy")


# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—ã–±–æ—Ä–∞ –ø–æ–ª—è –∏–∑ –º–µ–Ω—é
@dp.message_handler(lambda message: message.text in menu_to_field.keys(), state=SearchStates.CHOOSING_FIELD)
async def process_field_choice(message: Message, state: FSMContext):
    async with state.proxy() as data:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω–æ–µ –ø–æ–ª–µ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π field
        data['field'] = menu_to_field.get(message.text)

    # –ü–µ—Ä–µ–≤–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ ENTERING_VALUE
    await SearchStates.ENTERING_VALUE.set()

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–ø—Ä–æ—Å–æ–º –Ω–∞ –≤–≤–æ–¥ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—è
    await message.answer(f"–í–≤–µ–¥–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—è '{message.text}':")


# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ–ª—è
@dp.message_handler(state=SearchStates.ENTERING_VALUE)
async def process_value(message: Message, state: FSMContext):
    async with state.proxy() as data:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–≤–µ–¥–µ–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π value
        data['value'] = message.text
        field = data.get('field')

        # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–∏—Å–∫ –¥–∞–Ω–Ω—ã—Ö –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        async with aiosqlite.connect('data.db') as conn:
            async with conn.execute(f"SELECT number, brief_number, date, transport, recipient, notice_number, "
                                     f"registration_number, permission, previous_certificate, mdp_book, inv, cmr "
                                     f"FROM data WHERE {data['field']} = ?", (data['value'],)) as cursor:
                # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                rows = await cursor.fetchall()

        # –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, —Å–æ–æ–±—â–∞–µ–º –æ–± —ç—Ç–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        if not rows:
            await message.answer("–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
            # –ü–µ—Ä–µ–≤–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ CHOOSING_FIELD
            await SearchStates.CHOOSING_FIELD.set()

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –º–µ–Ω—é –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–∏—Å–∫–∞
            await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –º–µ–Ω—é –ø–æ –∫–æ—Ç–æ—Ä–æ–º—É –Ω–∞–¥–æ –Ω–∞–π—Ç–∏ –¥–∞–Ω–Ω—ã–µ  –≤ –ó–¢–ö", reply_markup=menu_keyboard)
            return

        # –í—ã–≤–æ–¥–∏–º –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        for row in rows:
            data_str = f"üìù–î–∞–Ω–Ω—ã–µ –ø–æ –∑–∞–ø—Ä–æ—Å—É '{message.text}':\n" \
                       f"üìå–ö—Ä–∞—Ç–∫–∏–π –Ω–æ–º–µ—Ä —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {row[1]}\n" \
                       f"‚è±Ô∏è–î–∞—Ç–∞: {row[2]}\n" \
                       f"üöó–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç: {row[3]}\n" \
                       f"üì¶üë§–ü–æ–ª—É—á–∞—Ç–µ–ª—å: {row[4]}\n" \
                       f"üî¢üì©–ù–æ–º–µ—Ä —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {row[5]}\n" \
                       f"üìùüî¢–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π –Ω–æ–º–µ—Ä —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {row[6]}\n" \
                       f"üïíüè≠–†–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–µ–Ω–∏–µ: {row[7]}\n" \
                       f"üîôüìú–ù–æ–º–µ—Ä –ø—Ä–µ–¥—à–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Å–≤–∏–¥–µ—Ç–µ–ª—å—Å—Ç–≤–∞: {row[8]}\n" \
                       f"üìñüöõ–ö–Ω–∏–∂–∫–∞ –ú–î–ü: {row[9]}\n" \
                       f"üí∞üìäINV: {row[10]}\n" \
                       f"üìúüöõCMR: {row[11]}"
            await message.answer(data_str)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ –¥–∞–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
            async with aiosqlite.connect('data.db') as conn:
                await conn.execute('CREATE TABLE IF NOT EXISTS sub_value (chat_id INTEGER, field TEXT, value TEXT)')
                await conn.commit()

                cursor = await conn.execute('SELECT 1 FROM sub_value WHERE chat_id = ? AND field = ? AND value = ?',
                                            (message.chat.id, field, data['value']))
                row = await cursor.fetchone()
                if row is not None:
                    # –ó–Ω–∞—á–µ–Ω–∏–µ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø–æ–ª—è, —Å–æ–æ–±—â–∞–µ–º –æ–± —ç—Ç–æ–º –∏ –≤—ã—Ö–æ–¥–∏–º –∏–∑ —Ñ—É–Ω–∫—Ü–∏–∏
                    await message.answer(
                        f"–ó–Ω–∞—á–µ–Ω–∏–µ '{data['value']}' –¥–ª—è –ø–æ–ª—è '{field}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
                    return

                await conn.execute("INSERT INTO sub_value (chat_id, field, value) VALUES (?, ?, ?)",
                                   (message.chat.id, field, data['value']))
                await conn.commit()

            # –°–æ–æ–±—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, —á—Ç–æ –∑–Ω–∞—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ
            await message.answer(f"–ó–Ω–∞—á–µ–Ω–∏–µ '{data['value']}' –¥–ª—è –ø–æ–ª—è '{field}' —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ FSMContext
        await state.finish()

        # –ü–µ—Ä–µ–≤–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ CHOOSING_FIELD
        await SearchStates.CHOOSING_FIELD.set()

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –º–µ–Ω—é –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–∏—Å–∫–∞
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –º–µ–Ω—é –ø–æ –∫–æ—Ç–æ—Ä–æ–º—É –Ω–∞–¥–æ –Ω–∞–π—Ç–∏ –¥–∞–Ω–Ω—ã–µ  –≤ –ó–¢–ö", reply_markup=menu_keyboard)


@dp.message_handler(lambda message: message.text == "11 - –í—ã—Ö–æ–¥",
                    state=[SearchStates.CHOOSING_FIELD, SearchStates.ENTERING_VALUE, 'search'])
async def handle_search_exit(message: types.Message, state: FSMContext):
    # –û—á–∏—â–∞–µ–º FSMContext
    await state.finish()

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –º–µ–Ω—é
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add(KeyboardButton('/time (–û—Å—Ç–∞–≤—à–µ–π—Å—è –≤—Ä–µ–º—è –ø–æ–¥–ø–∏—Å–∫–∏)'))
    keyboard.add(KeyboardButton('/search (–ü–æ–∏—Å–∫ –ø–æ –ª—é–±–æ–º—É —ç–ª–µ–º–µ–Ω—Ç—É –≤ –ó–¢–ö)'))

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –≤—ã—Ö–æ–¥–µ
    await bot.send_message(message.chat.id, "–í—ã—Ö–æ–¥ –∏–∑ –º–µ–Ω—é.", reply_markup=keyboard)


@dp.message_handler(Command("time"))
async def show_subscription_time(message: types.Message):
    user = User.get_or_none(telegram_chat_id=str(message.chat.id), approved=True, is_subscribed=True)
    if user:
        remaining_time = user.subscription_end_date - datetime.date.today()
        keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
        keyboard.add(KeyboardButton('/time (–û—Å—Ç–∞–≤—à–µ–π—Å—è –≤—Ä–µ–º—è –ø–æ–¥–ø–∏—Å–∫–∏)'))
        keyboard.add(KeyboardButton('/search (–ü–æ–∏—Å–∫ –ø–æ –ª—é–±–æ–º—É —ç–ª–µ–º–µ–Ω—Ç—É)'))
        await message.answer(f"–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞ –µ—â–µ {remaining_time.days} –¥–Ω–µ–π",
                             reply_markup=keyboard)






dp.register_message_handler(cmd_start, commands=['start'])


# –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
